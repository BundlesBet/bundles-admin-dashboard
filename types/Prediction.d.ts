/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AdminAccessSet = ContractEventLog<{
  _admin: string;
  _enabled: boolean;
  0: string;
  1: boolean;
}>;
export type GradedPools = ContractEventLog<{
  poolId: string;
  results: string[];
  0: string;
  1: string[];
}>;
export type LeagueAdded = ContractEventLog<{
  leagueId: string;
  name: string;
  sport: string;
  0: string;
  1: string;
  2: string;
}>;
export type LeagueUpdated = ContractEventLog<{
  leagueId: string;
  name: string;
  sport: string;
  0: string;
  1: string;
  2: string;
}>;
export type MatchAdded = ContractEventLog<{
  leagueId: string;
  espnMatchId: string;
  matchId: string;
  0: string;
  1: string;
  2: string;
}>;
export type MatchUpdated = ContractEventLog<{
  leagueId: string;
  espnMatchId: string;
  matchId: string;
  0: string;
  1: string;
  2: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Paused = ContractEventLog<{
  account: string;
  0: string;
}>;
export type PoolAdded = ContractEventLog<{
  poolId: string;
  matchIds: string[];
  startTime: string;
  endTime: string;
  fee: string;
  0: string;
  1: string[];
  2: string;
  3: string;
  4: string;
}>;
export type PoolPredicted = ContractEventLog<{
  predictionId: string;
  matchIds: string[];
  choices: string[];
  poolId: string;
  predictor: string;
  0: string;
  1: string[];
  2: string[];
  3: string;
  4: string;
}>;
export type PoolUpdated = ContractEventLog<{
  poolId: string;
  matchIds: string[];
  startTime: string;
  endTime: string;
  fee: string;
  0: string;
  1: string[];
  2: string;
  3: string;
  4: string;
}>;
export type PredictionUpdated = ContractEventLog<{
  predictionId: string;
  matchIds: string[];
  choices: string[];
  poolId: string;
  predictor: string;
  0: string;
  1: string[];
  2: string[];
  3: string;
  4: string;
}>;
export type RewardedPools = ContractEventLog<{
  poolId: string;
  winners: string[];
  amount: string[];
  0: string;
  1: string[];
  2: string[];
}>;
export type Unpaused = ContractEventLog<{
  account: string;
  0: string;
}>;

export interface Prediction extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Prediction;
  clone(): Prediction;
  methods: {
    addLeague(_league: [string, string]): NonPayableTransactionObject<void>;

    addLeagues(_leagues: [string, string][]): NonPayableTransactionObject<void>;

    addMatch(
      _matchData: [number | string | BN, number | string | BN]
    ): NonPayableTransactionObject<void>;

    addMatches(
      _matchData: [number | string | BN, number | string | BN][]
    ): NonPayableTransactionObject<void>;

    addPool(
      _pool: [
        (number | string | BN)[],
        (number | string | BN)[],
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<void>;

    addPoolPrediction(
      prediction: [
        (number | string | BN)[],
        (number | string | BN)[],
        number | string | BN,
        string
      ]
    ): NonPayableTransactionObject<void>;

    bund(): NonPayableTransactionObject<string>;

    getChoicesOfPrediction(
      _predictionId: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    getMatchIdsOfPool(
      _poolId: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    getResultsOfPool(
      _poolId: number | string | BN
    ): NonPayableTransactionObject<string[]>;

    gradePools(
      _poolId: number | string | BN,
      _results: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    isAdmin(admin: string): NonPayableTransactionObject<boolean>;

    isPredictedByPool(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    leagues(arg0: number | string | BN): NonPayableTransactionObject<{
      name: string;
      sport: string;
      0: string;
      1: string;
    }>;

    matchIndex(
      arg0: number | string | BN,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;

    matches(arg0: number | string | BN): NonPayableTransactionObject<{
      leagueId: string;
      espnMatchId: string;
      0: string;
      1: string;
    }>;

    owner(): NonPayableTransactionObject<string>;

    pause(): NonPayableTransactionObject<void>;

    paused(): NonPayableTransactionObject<boolean>;

    pools(arg0: number | string | BN): NonPayableTransactionObject<{
      startTime: string;
      endTime: string;
      fee: string;
      totalRewards: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    predictions(arg0: number | string | BN): NonPayableTransactionObject<{
      poolId: string;
      predictor: string;
      0: string;
      1: string;
    }>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    rewardPools(
      _poolId: number | string | BN,
      _winners: string[],
      _amounts: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    setAdmin(
      admin: string,
      enabled: boolean
    ): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    treasury(): NonPayableTransactionObject<string>;

    treasuryPercentage(): NonPayableTransactionObject<string>;

    unpause(): NonPayableTransactionObject<void>;

    updateLeague(
      _id: number | string | BN,
      _league: [string, string]
    ): NonPayableTransactionObject<void>;

    updateMatch(
      matchId: number | string | BN,
      matchData: [number | string | BN, number | string | BN]
    ): NonPayableTransactionObject<void>;

    updatePool(
      _poolId: number | string | BN,
      _pool: [
        (number | string | BN)[],
        (number | string | BN)[],
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ]
    ): NonPayableTransactionObject<void>;

    updatePoolPrediction(
      _predictionId: number | string | BN,
      prediction: [
        (number | string | BN)[],
        (number | string | BN)[],
        number | string | BN,
        string
      ]
    ): NonPayableTransactionObject<void>;

    updateTreasury(_treasury: string): NonPayableTransactionObject<void>;

    updateTreasuryPercentage(
      _percent: number | string | BN
    ): NonPayableTransactionObject<void>;

    withdraw(): NonPayableTransactionObject<void>;

    withdrawERC20(_token: string): NonPayableTransactionObject<void>;
  };
  events: {
    AdminAccessSet(cb?: Callback<AdminAccessSet>): EventEmitter;
    AdminAccessSet(
      options?: EventOptions,
      cb?: Callback<AdminAccessSet>
    ): EventEmitter;

    GradedPools(cb?: Callback<GradedPools>): EventEmitter;
    GradedPools(
      options?: EventOptions,
      cb?: Callback<GradedPools>
    ): EventEmitter;

    LeagueAdded(cb?: Callback<LeagueAdded>): EventEmitter;
    LeagueAdded(
      options?: EventOptions,
      cb?: Callback<LeagueAdded>
    ): EventEmitter;

    LeagueUpdated(cb?: Callback<LeagueUpdated>): EventEmitter;
    LeagueUpdated(
      options?: EventOptions,
      cb?: Callback<LeagueUpdated>
    ): EventEmitter;

    MatchAdded(cb?: Callback<MatchAdded>): EventEmitter;
    MatchAdded(options?: EventOptions, cb?: Callback<MatchAdded>): EventEmitter;

    MatchUpdated(cb?: Callback<MatchUpdated>): EventEmitter;
    MatchUpdated(
      options?: EventOptions,
      cb?: Callback<MatchUpdated>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Paused(cb?: Callback<Paused>): EventEmitter;
    Paused(options?: EventOptions, cb?: Callback<Paused>): EventEmitter;

    PoolAdded(cb?: Callback<PoolAdded>): EventEmitter;
    PoolAdded(options?: EventOptions, cb?: Callback<PoolAdded>): EventEmitter;

    PoolPredicted(cb?: Callback<PoolPredicted>): EventEmitter;
    PoolPredicted(
      options?: EventOptions,
      cb?: Callback<PoolPredicted>
    ): EventEmitter;

    PoolUpdated(cb?: Callback<PoolUpdated>): EventEmitter;
    PoolUpdated(
      options?: EventOptions,
      cb?: Callback<PoolUpdated>
    ): EventEmitter;

    PredictionUpdated(cb?: Callback<PredictionUpdated>): EventEmitter;
    PredictionUpdated(
      options?: EventOptions,
      cb?: Callback<PredictionUpdated>
    ): EventEmitter;

    RewardedPools(cb?: Callback<RewardedPools>): EventEmitter;
    RewardedPools(
      options?: EventOptions,
      cb?: Callback<RewardedPools>
    ): EventEmitter;

    Unpaused(cb?: Callback<Unpaused>): EventEmitter;
    Unpaused(options?: EventOptions, cb?: Callback<Unpaused>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AdminAccessSet", cb: Callback<AdminAccessSet>): void;
  once(
    event: "AdminAccessSet",
    options: EventOptions,
    cb: Callback<AdminAccessSet>
  ): void;

  once(event: "GradedPools", cb: Callback<GradedPools>): void;
  once(
    event: "GradedPools",
    options: EventOptions,
    cb: Callback<GradedPools>
  ): void;

  once(event: "LeagueAdded", cb: Callback<LeagueAdded>): void;
  once(
    event: "LeagueAdded",
    options: EventOptions,
    cb: Callback<LeagueAdded>
  ): void;

  once(event: "LeagueUpdated", cb: Callback<LeagueUpdated>): void;
  once(
    event: "LeagueUpdated",
    options: EventOptions,
    cb: Callback<LeagueUpdated>
  ): void;

  once(event: "MatchAdded", cb: Callback<MatchAdded>): void;
  once(
    event: "MatchAdded",
    options: EventOptions,
    cb: Callback<MatchAdded>
  ): void;

  once(event: "MatchUpdated", cb: Callback<MatchUpdated>): void;
  once(
    event: "MatchUpdated",
    options: EventOptions,
    cb: Callback<MatchUpdated>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Paused", cb: Callback<Paused>): void;
  once(event: "Paused", options: EventOptions, cb: Callback<Paused>): void;

  once(event: "PoolAdded", cb: Callback<PoolAdded>): void;
  once(
    event: "PoolAdded",
    options: EventOptions,
    cb: Callback<PoolAdded>
  ): void;

  once(event: "PoolPredicted", cb: Callback<PoolPredicted>): void;
  once(
    event: "PoolPredicted",
    options: EventOptions,
    cb: Callback<PoolPredicted>
  ): void;

  once(event: "PoolUpdated", cb: Callback<PoolUpdated>): void;
  once(
    event: "PoolUpdated",
    options: EventOptions,
    cb: Callback<PoolUpdated>
  ): void;

  once(event: "PredictionUpdated", cb: Callback<PredictionUpdated>): void;
  once(
    event: "PredictionUpdated",
    options: EventOptions,
    cb: Callback<PredictionUpdated>
  ): void;

  once(event: "RewardedPools", cb: Callback<RewardedPools>): void;
  once(
    event: "RewardedPools",
    options: EventOptions,
    cb: Callback<RewardedPools>
  ): void;

  once(event: "Unpaused", cb: Callback<Unpaused>): void;
  once(event: "Unpaused", options: EventOptions, cb: Callback<Unpaused>): void;
}
